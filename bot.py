import logging
import os
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config import TELEGRAM_TOKEN

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ utils (–∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–æ–≤)
from utils import diary
from utils import support_ai
from utils import exercises
from utils import hotlines
from utils import admin

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

def get_main_menu(user_id):
    from telegram import ReplyKeyboardMarkup
    return ReplyKeyboardMarkup(
        [
            ["–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
            ["üßò –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è"],
            ["–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"] if user_id in [admin.ADMIN_ID] else []
        ],
        resize_keyboard=True
    )

async def start(update, context):
    user_id = update.message.from_user.id
    context.user_data["section"] = "menu"
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu(user_id))

async def message_handler(update, context):
    text = update.message.text or ""
    user_id = update.message.from_user.id

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if context.user_data.get("section") == "menu":
        if text == "–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫":
            context.user_data["section"] = "diary"
            await diary.handle(update, context, get_main_menu(user_id))
        elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            context.user_data["section"] = "support"
            await support_ai.handle(update, context, get_main_menu(user_id))
        elif text == "üßò –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
            context.user_data["section"] = "exercises"
            await exercises.handle(update, context, get_main_menu(user_id))
        elif text == "‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è":
            context.user_data["section"] = "hotlines"
            await hotlines.handle(update, context, get_main_menu(user_id))
        elif text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and user_id in [admin.ADMIN_ID]:
            context.user_data["section"] = "admin"
            await admin.handle(update, context, get_main_menu(user_id))
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é", reply_markup=get_main_menu(user_id))

    # –ü–æ–¥—Å–µ–∫—Ü–∏–∏
    elif context.user_data["section"] == "diary":
        await diary.handle(update, context, get_main_menu(user_id))

    elif context.user_data["section"] == "support":
        await support_ai.handle(update, context, get_main_menu(user_id))

    elif context.user_data["section"] == "exercises":
        await exercises.handle(update, context, get_main_menu(user_id))

    elif context.user_data["section"] == "video_exercises":   # üîπ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ
        await exercises.handle(update, context, get_main_menu(user_id))

    elif context.user_data["section"] == "hotlines":
        await hotlines.handle(update, context, get_main_menu(user_id))

    elif context.user_data["section"] == "admin":
        await admin.handle(update, context, get_main_menu(user_id))

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
