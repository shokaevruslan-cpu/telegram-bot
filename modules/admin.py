from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from utils.database import fetch_alert_users, fetch_user_dialog
import os

def get_admin_menu():
    return ReplyKeyboardMarkup(
        [["üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω—å—è", "üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥–∏"], ["–ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

async def handle(update, context, main_menu):
    text = update.message.text or ""
    user_id = update.message.from_user.id

    if text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω—å—è":
        users = fetch_alert_users()
        if not users:
            await update.message.reply_text("‚ö° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_admin_menu())
        else:
            msg = "üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"‚Ä¢ {u}" for u in users])
            await update.message.reply_text(msg, reply_markup=get_admin_menu())

    elif text == "üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥–∏":
        users = fetch_alert_users()
        if not users:
            await update.message.reply_text("‚ö° –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_admin_menu())
        else:
            keyboard = [
                [InlineKeyboardButton(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}", callback_data=f"view_dialog_{uid}")]
                for uid in users
            ]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif text == "–ù–∞–∑–∞–¥":
        context.user_data["section"] = "menu"
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())


# ===========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫
# ===========================
async def handle_callback(update, context):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("view_dialog_"):
        user_id = int(query.data.split("_")[2])
        dialog = fetch_user_dialog(user_id)

        if not dialog:
            await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç.")
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        parts = []
        for role, msg, created_at in dialog:
            who = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if role == "user" else "ü§ñ AI"
            parts.append(f"[{created_at.strftime('%Y-%m-%d %H:%M')}] {who}:\n{msg}\n")
        dialog_text = "\n".join(parts)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        os.makedirs("logs", exist_ok=True)
        file_path = f"logs/dialog_{user_id}.txt"
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(dialog_text)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(f"üìÇ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≥–æ—Ç–æ–≤.")

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–º–µ–Ω–µ–º
        with open(file_path, "rb") as f:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=InputFile(f, filename=f"dialog_{user_id}.txt")
            )
