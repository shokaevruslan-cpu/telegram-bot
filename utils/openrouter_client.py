import os
import httpx
import asyncio
import logging

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AI_MODEL = os.getenv("AI_MODEL", "gpt-4o-mini")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ –∫–æ–Ω—Å–æ–ª—å)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

async def chat_with_ai(prompt: str) -> str:
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": AI_MODEL,
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
                    "–û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π. "
                    "–ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤."
                )
            },
            {"role": "user", "content": prompt},
        ],
        "max_tokens": 400,
        "temperature": 0.7,
    }

    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ 3 —Ä–∞–∑ –ø—Ä–∏ 429
    for attempt in range(3):
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                resp = await client.post(url, headers=headers, json=data)
                resp.raise_for_status()
                result = resp.json()
                reply = result["choices"][0]["message"]["content"].strip()
                return reply
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429 and attempt < 2:
                logging.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                await asyncio.sleep(5)
                continue
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return "üòî –ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return "üòî –ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."
